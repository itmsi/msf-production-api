import { DataSource } from 'typeorm';
import { PermissionSeeder } from './permission.seeder';
import { MenuSeeder } from './menu.seeder';
import { MenuHasPermissionSeeder } from './menu-has-permission.seeder';
import { RoleSeeder } from './role.seeder';
import { UserSeeder } from './user.seeder';
import { RoleHasPermissionSeeder } from './role-has-permission.seeder';
import { UserRoleSeeder } from './user-role.seeder';

export class ProductionSeeder {
  constructor(private dataSource: DataSource) {}

  async run(): Promise<void> {
    console.log('üöÄ Starting Production Module seeding process...\n');

    try {
      // 1. Seed Permissions (no dependencies)
      console.log('üîê Seeding Permissions...');
      const permissionSeeder = new PermissionSeeder(this.dataSource);
      await permissionSeeder.run();
      console.log('‚úÖ Permissions seeding completed\n');

      // 2. Seed Menus (no dependencies)
      console.log('üìã Seeding Menus...');
      const menuSeeder = new MenuSeeder(this.dataSource);
      await menuSeeder.run();
      console.log('‚úÖ Menus seeding completed\n');

      // 3. Seed Menu-Permission relationships (depends on Menus and Permissions)
      console.log('üîó Seeding Menu-Permission relationships...');
      const menuHasPermissionSeeder = new MenuHasPermissionSeeder(this.dataSource);
      await menuHasPermissionSeeder.run();
      console.log('‚úÖ Menu-Permission relationships seeding completed\n');

      // 4. Seed Roles (no dependencies)
      console.log('üë• Seeding Roles...');
      const roleSeeder = new RoleSeeder(this.dataSource);
      await roleSeeder.run();
      console.log('‚úÖ Roles seeding completed\n');

      // 5. Seed Users (no dependencies)
      console.log('üë§ Seeding Users...');
      const userSeeder = new UserSeeder(this.dataSource);
      await userSeeder.run();
      console.log('‚úÖ Users seeding completed\n');

      // 6. Seed Role-Permission relationships (depends on Roles and Permissions)
      console.log('üîó Seeding Role-Permission relationships...');
      const roleHasPermissionSeeder = new RoleHasPermissionSeeder(this.dataSource);
      await roleHasPermissionSeeder.run();
      console.log('‚úÖ Role-Permission relationships seeding completed\n');

      // 7. Seed User-Role relationships (depends on Users and Roles)
      console.log('üîó Seeding User-Role relationships...');
      const userRoleSeeder = new UserRoleSeeder(this.dataSource);
      await userRoleSeeder.run();
      console.log('‚úÖ User-Role relationships seeding completed\n');

      console.log('üéâ Production Module seeding completed successfully!');
      console.log('\nüìã Summary of seeded data:');
      console.log('   ‚Ä¢ 6 Permissions (CREATE, READ, UPDATE, DELETE, EXPORT, IMPORT)');
      console.log('   ‚Ä¢ 50+ Menu Items with proper hierarchy');
      console.log('   ‚Ä¢ Menu-Permission relationships for Production Module');
      console.log('   ‚Ä¢ 1 Role (Super Admin)');
      console.log('   ‚Ä¢ 1 User (superadmin)');
      console.log('   ‚Ä¢ Role-Permission relationships (Super Admin gets all permissions)');
      console.log('   ‚Ä¢ User-Role relationships (superadmin -> Super Admin)');

      console.log('\nüîë Super Admin Credentials:');
      console.log('   ‚Ä¢ Username: superadmin');
      console.log('   ‚Ä¢ Password: Qwer1234!');
      console.log('   ‚Ä¢ Role: Super Admin (full access to all menus and features)');

    } catch (error) {
      console.error('‚ùå Error during Production Module seeding:', error);
      throw error;
    }
  }
}
